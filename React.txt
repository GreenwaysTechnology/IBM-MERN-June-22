				React
....................................................................................

Why javascript was created?

Processing document(web document).

document means collection of some information, document is a file contain information about something.

1960s - IBM and xerox joined togther who build technology for preparing digital documents, in order to build documents, who create a language - SGML -Standarized General Markup Language

SGML (standard generalized markup language) is an international standard for the definition of markup languages (having symbols <>); that is, it is a metalanguage.
			
Using SGML we can create domain specific languages.

			SGML
			  |

 -----------------------------------------------------
 |       |   |   |
MathML HTML XML WML etc.................

Javascript was created to process HTML document inside web browser.
.....................................................................................
HTML:

1.HTML IS PL? - YES
2.HTML Is compiled -YES
3.HTML is excuted-YES

index.html -source code


index.html -source code

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

-------------------Browser
loader---LOAD Code into browser
 |
   from file: or http:
 |
Parser : Parser is special compiler which converts source into lexical tree(string tree)
 |
body
  div
     h1
        Welcome 
     h1
  div
body
|
 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body
|
-------------------------Execution cycle------------------------------------
HTML Execution engine : Request Os ,to allocate memory :Runtime

-LinkedList

body -Node
  div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body

 Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
body
...
|
|
|
Layout/Paint Engine: will convert nodes into pxs : final output
..............................................................................................
				Dynamic HTML - Inside Web Browser
.............................................................................................

Once the html has been rendered by the web browser, can we change the html(adding new element,updating existing element content,removing node,listing nodes).

The company called Netscap communcation, the second web browser creator after line mode web browser.

The NetsCap communication introduced the browser called netscap navigator , today firefox.

The netscap introduced a new technology called how to change html after rendering.

In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

                        "The birth of Javascript"

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.

DOM is published by W3C in order to standarized the  DOM programming across the browsers

............................................................................................
How dom works?

index.html           Broser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*******************************************************************************************	

Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?



if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()

<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.

How via factory Objects: object helps to get other documents

Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.


What is our objective here? DOM Programming?


Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements:
......................

HTMLElement document.getElementById(id)	       Find an element by element id
HTMLElement Document document.getElementsByTagName(name)	Find elements by tag name
HTMLElement document.getElementsByClassName(name)	Find elements by class name
HTMLElement document.querySelectory(selector)        find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements:


document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element



How to implement dom programming?

1.using plain js
  if we use plain js , it is very difficult to build large applications

2.using frameworks and libs

2000 - The first javascript framework - DOJO
2002-2005 - JQuery - is the second most powerfull dom lib.
After 2006 - many js libs and frameworks introduced.....

Angular js - 2007
React - 2013 
Vue js
Polymer
Angular 2

React:
A JavaScript library for building user interfaces

A React is simple DOM lib which follows the same object tree model.

Architecture for libs and frameworks:


Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			 Browser Engine




Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine



What is jquery engine?
  Jquery engine is also javascript program.




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	              React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

.....................................................................................
			  React Project setup
...................................................................................

Project layout we never create our own, instead , react team (facebook) provides tool to create,mananage react projects.

create-react-app
https://create-react-app.dev/


there two ways

1.using npm global module
npm install create-react-app -g
create-react-app  myapp
cd my-app
npm start

2.using npx tool
npx create-react-app my-app
cd my-app
npm start

..........................................................
steps:

1.using npm global module
npm install create-react-app -g
create-react-app  myapp
cd my-app
npm start
...................................................................................

React : DOM programming

1.create element
2.edit element
3.delete element
4.iterate elements

React provides a default page called index.html.
index.html is loaded into browser which constructs inital dom tree


create dom element using plain js

//DOM node creation using plain js 

function createNode() {
    //create node 
    const Heading = document.createElement('h1')
    //set content for heading
    Heading.innerHTML = 'Hello React!'
    //get div node so that i can insert into that 
    const rootElement = document.getElementById('root')
    rootElement.appendChild(Heading)
}
createNode()
...................................................................................
create dom element using react

		How to create dom node , attach on existing tree
				using react.js
		
React core modules:

react.js      => Core module
react-dom.js  => Browser


//dom element using react 
import React from 'react';
import ReactDOM from 'react-dom';
//create node/create Element 
const Heading = <h1>Hello React</h1>
//get div node so that i can insert into that 
//const rootElement = document.getElementById('root')
//rootElement.appendChild(Heading)
//ReactDOM.render(Heading, rootElement)
ReactDOM.render(Heading,document.getElementById('root'))



The code above , we can see mixure of javascript and html.

How browser understands this code coimbination?

  The browser never understands this code directly.

What is this code is all about?
    
 Face book created a mini /small language for building react application - JSX language

...........................................................................................
		 JSX - Java script and XML - langugage to create User interfaces
............................................................................................

React uses declarative and dsl  programming language model

Declarative:
  =>you can tell what to do.
  =>more readable , like english

imperative:
  =>You have to tell what todo, how to do?
  languages- c,c++,java,javascript,
  libs : jquery
 
GPL:
  General purpose programming languages are used to build many category application
 c,c++,java...

DSL:
  Language created for only one specific purpose, cant be used for other domains

HTML -  can be used only for creating web document.
JSX  - can be used only by react for creating user interfaces.
  
       "Since jsx  is a language cant be executed on browser /mobile directly."

JSX compilation model:

                   layout.js / layout.jsx  -source code
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Excution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		  Excute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
		    Render Engine ; will convert react object tree into js dom object tree
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |
       v8
     Browser


..............................................................................................
				 Components
.............................................................................................

What is Component?
   Component  is nothing but "Object".

Component term introduced by MicroSoft in 1980s. According to Microsoft Component is object which is having "state(variables),behaviours(methods),User Interface(visual Representation)".

Component represents User Interface
Component is Object which represents User Interface.
User interface in browser is represented by HTML element or elements

Component can be represented some time , the object which helps to make up the Userinterface(invisible user interface).


element is <h1>Hello</h1>

elements are <div><div><h1>Hello</h1></div></div>

Plain Object:
 Object without ui is called plain object.
eg:
   function Employee() {
     this.id = 0;
     this.calculate=function(){}
   }

   new Employee()

DOM : Document Object Model
 
Document -  html
Object Model - Representation of HTML elements
......................................................................................
Why We use Components model/Architecture?
  
=>Componets are independant objects.
=>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.
 
Eg : 
 I am creating a component called "tax calculator".
 
lets say i want to use the tax calculator inside my hr application and inside my sale applcation , and purchase application.
..............................................................................................
				One Component is not a component
.............................................................................................
In large application, we create more components.
All components we coimbine to make up other big components or application.
Such wiring(connecting) components forms the structure called "component tree".

Component Tree:
   =>Object tree / DOM Tree / Virutal DOM Tree.

.....................................................................................

How to create Components in react?

We have three patterns.

1.Variable Pattern
2.function pattern
3.ES 6 class Pattern


1.Variable Pattern

//component creational pattern  - variable pattern 
import React from 'react'
import ReactDOM from 'react-dom'

//component 
const Heading = <h1>Hello React</h1>

ReactDOM.render(Heading,document.getElementById('root'))


2.function pattern
//component creational pattern  - functions pattern 
import React from 'react'
import ReactDOM from 'react-dom'

//functions
//Heading is component Name
// function Heading() {
//     //return component 
//     return <h1>Hello React!!</h1>
// }
//es 6 arrow functions
// const Heading = () => {
//     //return component 
//     return <h1>Hello React!!</h1>
// }

const Heading = () => <h1>Hello React!!</h1>
//calling function like below is not recommended because it uses imperative style
// ReactDOM.render(Heading(), document.getElementById('root'))

//this more readable syntax;declartive syntax
ReactDOM.render(<Heading></Heading>, document.getElementById('root'))


Create Components Using ES 6 Class:
....................................

in order to create component  we need to inherit React.Component

React.Component is base class, which contains the follwing things

1.instance variables
 props
 state
2.instance methods

life cycle methods
 
to be discussed later
render() - Which returns ReactElement
 
other methods
to be discussed later

3.static variables
to be discussed later
//component creational pattern  - class pattern 
import React from 'react'
import ReactDOM from 'react-dom'

class Heading extends React.Component {
    //override the method called render
    render() {
        return <h1>Hello  React!!!</h1>
    }

}

ReactDOM.render(<Heading></Heading>, document.getElementById('root'))
..................................................................................
			Which pattern is good to follow

According react team, any pattern you can use based on your problem statements but 
"highly recommended is functions only"

//component creational pattern  - class pattern 
import React from 'react'
import ReactDOM from 'react-dom'

class Heading extends React.Component {
    //override the method called render
    render() {
        return <h1>Hello  React!!!</h1>
    }

}

ReactDOM.render(<Heading></Heading>, document.getElementById('root'))
...................................................................................
..............................................................................................	
				JSX Rules
..............................................................................................

JSX - Javascript and XML

What is JSX?
 JSX is dsl language to create user interfaces

What is relationship with XML?

 Inside JSX , we write javascript code and HTML code only not xml code.

Why the term XML is used?

 When we write JSX code, we need stable mark up standards.

You know very well HTML has weak parser  that means 
 <h1>hello
when run the code , the html parser does not stop rendering hello, it never throws any error

in order to avoid instability code inside jsx during compilation, JSX team adopted XML Parser rules, since XML parser has strong parser

Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

3.Component names should start with Uppercase,generally would be noun.

want a JSX fragment <>...</>? (6:12)

webpack 5.70.0 compiled with 2 errors in 41 ms

How to fix this problem?
  we need to wrap inside root/parent element.

What can be parent element?

  =>any html container  elements -  table,div,span,header,footer,address,nav
  =>you can use other components -  Tab,Dashboard....


import React from "react";
import ReactDOM from 'react-dom';

const Heading = ()=>{ 
    return <h1>Hello</h1>
            <h2>Sapient</h2>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<Heading/>, document.getElementById('root'));

 Parsing error: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (6:12)

webpack 5.70.0 compiled with 2 errors in 41 ms

How to fix this problem?
  we need to wrap inside root/parent element.

What can be parent element?

  =>any html container  elements -  table,div,span,header,footer,address,nav
  =>you can use other components -  Tab,Dashboard....

.............
Right Code;
import React from "react";
import ReactDOM from 'react-dom';

const Heading = () => {
    return <div>
        <h1>Hello</h1>
        <h2>Sapient</h2>
    </div>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<Heading />, document.getElementById('root'));
..............................................................................................
Component names should start with Uppercase,generally would be noun.

import React from "react";
import ReactDOM from 'react-dom';

const heading = () => {
    return <div>
        <h1>Hello</h1>
        <h2>Sapient</h2>
    </div>
}

//ReactDOM.render(<Heading></Heading>, document.getElementById('root'));
ReactDOM.render(<heading />, document.getElementById('root'));

react-dom.development.js:67 Warning: The tag <heading> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at heading

Here it wont throw any error,but it wont render any thing in the screen.
you can see warnings in the console. you have to fix it.  
.....................................................................................
			Component tree /component composition
.....................................................................................

How to break large ui into smaller and smallar.

Why we need to create components?
 -Resuablity

DRY

How to create Component tree?



import React from 'react'
import ReactDOM from 'react-dom'


//Header
const Header = () => <div>
    <h1>Header</h1>
</div>

//footer
const Footer = () => <div>
    <h1>footer</h1>
</div>

const Body = () => <div>
    <h1>Component Based</h1>
    <p>
        Build encapsulated components that manage their own state, then compose them to make complex UIs.

        Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.
    </p>
    <h1>Declarative</h1>
    <p>
        React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.

        Declarative views make your code more predictable and easier to debug.
    </p>
</div>

const Page = () => <div>
    <Header />
    <Body />
    <Footer />
</div>


ReactDOM.render(<Page />, document.getElementById('root'))

...................................................................................
				..............................................................................................
				React Dev tools
..............................................................................................

React dev tool is used to visualize the component tree in the browser, without looking the source code ,how the tree has been constructured.

How to install react dev tool?

https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en

How to use react dev tool?

 1.lanuch application
 2.open dev tool inside chrome
....................................................................................

chrome dev tool

component tree:
import React from 'react'
import ReactDOM from 'react-dom'


const Link = () => <ul>
    <li><a href="letscreate">Let's Create</a></li>
    <li><a href="products">Products and Solutions</a></li>
    <li><a href="consulting">Consulting & Services</a></li>
    <li><a href="support">Learn & Support</a></li>
</ul>

const Search= ()=><input placeholder="Search Items"/>

//menu bar 
const MenuBar = () => <nav>
     <Link/>
     <Search/>
</nav>


//Header
const Header = () => <div>
    <h1>Header</h1>
    <MenuBar />
</div>

//footer
const Footer = () => <div>
    <h1>footer</h1>
</div>

const Body = () => <div>
    <h1>Component Based</h1>
    <p>
        Build encapsulated components that manage their own state, then compose them to make complex UIs.

        Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.
    </p>
    <h1>Declarative</h1>
    <p>
        React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.

        Declarative views make your code more predictable and easier to debug.
    </p>
</div>

const Page = () => <div>
    <Header />
    <Body />
    <Footer />
</div>


ReactDOM.render(<Page />, document.getElementById('root'))


........
.............................................................................................
			Component Compostion and Modularity
..............................................................................................

In react application, we dont / never dump the code into single file, we need to modularize the application.

File Structure
Is there a recommended way to structure React projects?

  React doesn’t have any opinions on how you put files into folders. 
  That said there are a few common approaches popular in the ecosystem you may want to consider.

Grouping by "features" or "routes-menu"

  One common way to structure projects is to locate CSS, JS, and tests together inside folders grouped by feature or route.
			
common or util /
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
 Another popular way to structure projects is to group similar files together, for example:

api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css

Some people also prefer to go further, and separate components into different folders depending on their role in the application. For example, Atomic Design is a design methodology built on this principle. Remember that it’s often more productive to treat such methodologies as helpful examples rather than strict rules to follow.

               "https://bradfrost.com/blog/post/atomic-web-design/"
.....................................................................................

-features
 
src
 -products
 -customers
 -invoice
 -payments

file Name:
components can be saved in two extension

fileName.js
fileName.jsx - components must be saved with this extension.

FileName must match component feature  - profile 

File Name can be saved as fileName.js or fileName.jsx

Rules for jsx extensions:

-Root file (index,App) files must not be saved with ".jsx" , root files must be saved only with .js extension.

-Barrel export feature must be used in large application.




src/links/link.jsx
import React from 'react'

const Link = () => <ul>
    <li><a href="letscreate">Let's Create</a></li>
    <li><a href="products">Products and Solutions</a></li>
    <li><a href="consulting">Consulting & Services</a></li>
    <li><a href="support">Learn & Support</a></li>
</ul>
export { Link };

src/menus/menubar.jsx
import React from 'react'
import { Link } from '../links/link'

const MenuBar = () => <nav>
    <Link />
</nav>

export { MenuBar }

src/header/header.jsx
import React from 'react'
import { MenuBar } from '../menus/menubar'

const Header = () => <header>
    <h1>IBM -header</h1>
    <hr />
    <MenuBar />
</header>

export {Header}


src/footer/footer.jsx
import React from 'react'

//Footer 
export const Footer = () => <header>
    <h1>IBM-Footer</h1>
</header>
//Page


src/body/body.jsx
import React  from "react"

export const Body = () => <div>
<p>
    International Business Machines Corporation (IBM) is an American multinational technology corporation headquartered in Armonk, New York, with operations in over 171 countries. The company began in 1911, founded in Endicott, New York, by trust businessman Charles Ranlett Flint, as the Computing-Tabulating-Recording Company (CTR) and was renamed "International Business Machines" in 1924. IBM is incorporated in New York
</p>
</div>

src/page/page.jsx
import { Header } from '../header/header'
import { Body } from '../body/body'
import { Footer } from '../footer/footer'

//component linking
export const Page = () => <div>
    <Header />
    <Body />
    <Footer />
</div>

src/App.js
import React from 'react'
import { Page } from './page/page'

const App = () => <Page />

export default App;


src/index.js
import ReactDOM from 'react-dom';
import App from './App';


ReactDOM.render(<App />, document.getElementById('root'))
...........................................................................................................................................................................................
				Barrel export
.............................................................................................

Use Case :

=>How to avoid multiple import of things from same folder
=>how to avoid file names while import

Barrel export solves the above problem

src/header
 -header.jsx
 -menubar.jsx
 -index.js

Steps:
1 inside every subfolders(header,body,profile)
 create index.js

2.import what ever you want to export outside 

3. you re export again what ever you have imported


src/header/index.js

import { Header } from './header'
import { MenuBar } from './menubar'

//barrel export : Re export
export { Header, MenuBar }
....................................................................................
..............................................................................................
				How to Style components
..............................................................................................

CSS integration:
................

How to add css to an html element?

=> using class attribute  - external style
=> using style attribute - inline

HTML :
<div class="container">

</div>

<div style="background-color:red">

</div>

HTML ATTRIBUTES And JSX:

 We cant /should not add html attributes directly in jsx code.
 JSX uses certain rules for adding html attributes.

 "Since JSX is closer to JavaScript than to HTML, React DOM uses "camelCase property naming convention" instead of HTML attribute names"

For example, class becomes className in JSX, and tabindex becomes tabIndex.

<div className="container" tabIndex>

</div>

List of jsx attributes:
accept acceptCharset accessKey action allowFullScreen alt async autoComplete
autoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked
cite classID className colSpan cols content contentEditable contextMenu controls
controlsList coords crossOrigin data dateTime default defer dir disabled
download draggable encType form formAction formEncType formMethod formNoValidate
formTarget frameBorder headers height hidden high href hrefLang htmlFor
httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list
loop low manifest marginHeight marginWidth max maxLength media mediaGroup method
min minLength multiple muted name noValidate nonce open optimum pattern
placeholder poster preload profile radioGroup readOnly rel required reversed
role rowSpan rows sandbox scope scoped scrolling seamless selected shape size
sizes span spellCheck src srcDoc srcLang srcSet start step style summary
tabIndex target title type useMap value width wmode wrap

"https://reactjs.org/docs/dom-elements.html"

adding Events Handlers

 <button onClick={method}></button>
  
CSS : 

->You can add your own css - custom css
->you can add third party css frameworks -  bootstrap,materialdesign,spark...

import statement can be used to import js files.

import statement can also be used to import
=>css files
=>images
=>any static assets.


import React from 'react';
import ReactDOM from 'react-dom';
import { Page } from './layout/page';
import './index.css' //webpack automatically include this inside bundle
import './App.css'

const App = () => <div className="App">
    <Page />
</div>

ReactDOM.render(<App />, document.getElementById('root'))

Note: if you import css in root file(index.js), those css styles will be available across the applications.
..............................................................................................
				Component level css
.............................................................................................
if you want to apply/use css for a particular component.

src/header/header.css
.background {
    background-color: antiquewhite;
}

src/header/header.jsx
import React from 'react';
import './header.css'

export const Header = () => <header className="background">
    <h1>Sapient</h1>
</header>
.............................................................................................
			  How to add third party css - bootstrap
............................................................................................

Steps:

1.install bootstrap

npm install bootstrap --save

2.import bootstrap in index.js
import 'bootstrap/dist/css/bootstrap.css'

import React from 'react';
import ReactDOM from 'react-dom';
import { Page } from './layout/page';
// import './index.css' //webpack automatically include this inside bundle
// import './App.css'
import 'bootstrap/dist/css/bootstrap.css'

const App = () => <div className="container">
    <Page />
</div>

ReactDOM.render(<App />, document.getElementById('root'))
..............................................................................................
				Style Attribute
..............................................................................................


In html style is just a string

<div style="background-color:red">

In jsx(react) style is object

Style Object is nothing "css property representation in javascript"

CSS styles:

.className {
  background-color:pink;  //dash case notation
}

Css styles in javascript
 In js css styles are represented as camel case notation.

backgroundColor=pink

element.style.backgroundColor=pink

  "https://www.w3schools.com/jsref/dom_obj_style.asp"



Steps to create style object and attach with element

1.declare style object
//style object
const headerStyle = {
    backgroundColor: 'red'
};
2.attach with element
export const Header = () => <header className="background">
    <h1 style={headerStyle}>Sapient</h1>
</header>


import React from 'react';
import './header.css'

//style object
const headerStyle = {
    color: 'red'
};

export const Header = () => <header className="background">
    <h1 style={headerStyle}>Sapient</h1>
    <h2 style={{ color: 'blue' }}>Publisis</h2>
</header>
....................................................................................
.........
				Adding Comments in JSX
.............................................................................................

Js comments
//style object
const headerStyle = {s
    color: 'red'
};

JSX Comment:

export const Header = () => <header className="background">
    {/* Adding style attribute via variables */}
    <h1 style={headerStyle}>Sapient</h1>
    {/* this is inline style : adding style object in the same line */}
    <h2 style={{ color: 'blue' }}>Publisis</h2> 
</header>
.....................................................................................
..............................................................................................
				  Dynamic Page - Data Binding
..............................................................................................

Types of web

1.static web
   -only html markup,hand coded.
2.dynamic web
   - html is created on fly with data

How to add data in the component /how to bind data in the component?

data can be represented in many ways.

-primitives - numbers,strings,boolean
-objects - literal objects, objects created out of class/function
-arrays - it is also object but collection 

How to bind data inside jsx?

let name='subramanian'

<h1>Hello {name} </h1>

{} -  databinding syntax.

data binding can be
{variable}
{expression} - {10*10} {getValue()} {emp.id}


import React from "react";
import ReactDOM from "react-dom";
import 'bootstrap/dist/css/bootstrap.css'
//profile component


function getPoints(){
   return 10;
}


const Profile = () => {
    const id = 1;
    const name = "Subramanian";
    const status = true;
    const address = {
        city: 'coimbatore',
        state: 'Tamil nadu'
    }
    return <div className="container">
        <h1>Profile Details</h1>
        <h3>Id  {id}</h3>
        <h3>Name {name} </h3>
        {/* React converts boolean values into empty string, if you want to display something , you have to use tenary operator to replace empty string */}
        <h3>status {status ? "Available" : "Not Available"}</h3>
        <h3>Points {getPoints() * 2 }</h3>
        <address>
            {address.city} {address.state}
        </address>
    </div>
}
ReactDOM.render(<Profile />, document.getElementById('root'))
...........................****************..........................................
..............................................................................................
			  Compoent Design Principles of React
.............................................................................................


Data can be declared for a component in two ways.

1.data is supplied from outside the component.
2.data is supplied within the component


1.Data is supplied from outside the component.

When component receives data from the outside, this pattern is called as "property pattern" / props pattern.

Outside the component means what? What is outside for the component?

YOu know very well , react creates components and assembles them in hierachical order(tree)
in the tree model, the one component called as "parent" component and other components are called child component and sibiling components.

outside means "Parent".

    "Data is supplied from the parent compoent to child component" - Props pattern /Property pattern
.....................................................................................
			  Props Pattern


Parent Component
   |
  data
Child Component

import React from "react";
import ReactDOM from "react-dom";


//child component
//args 
function Greeter(message, name) {
    return <h1>{message} {name}</h1> //return object - object 
}

//Parent Compoent
const App = () => {
    return Greeter('Hai', 'Subramanian')
}

ReactDOM.render(<App />, document.getElementById('root'))

.................................................................................

import React from "react";
import ReactDOM from "react-dom";


//child component
//args 
// function Greeter(message, name) {
//     return <h1>{message} {name}</h1> //return object - object 
// }

//here myvariable will hold properties send by parent component
//myvariable holds values as object(literalobject)
// function Greeter(myvariable) {
//     console.log(myvariable)
//     return <h1>{myvariable.message} {myvariable.name}</h1> //return object - object 
// }

//props - props just variable by convention
//props = {name:'',message:''}
// function Greeter(props) {
//     console.log(props)
//     return <h1>{props.message} {props.name}</h1> //return object - object 
// }
// const Greeter = props => <h1>{props.message} {props.name}</h1>

const Greeter = ({ message, name }) => <h1>{message} {name}</h1>


//Parent Compoent
const App = () => {
    //return Greeter('Hai', 'Subramanian')
    return <div>
        <Greeter message="Hello" name="Subramanian" />
        <Greeter message="Hello" name="Geetha" />
        <Greeter message="Hello" name="Priya" />

    </div>
}

ReactDOM.render(<App />, document.getElementById('root'))

import React from "react";
import ReactDOM from "react-dom";


//child component
//args 
// function Greeter(message, name) {
//     return <h1>{message} {name}</h1> //return object - object 
// }

//here myvariable will hold properties send by parent component
//myvariable holds values as object(literalobject)
// function Greeter(myvariable) {
//     console.log(myvariable)
//     return <h1>{myvariable.message} {myvariable.name}</h1> //return object - object 
// }

//props - props just variable by convention
//props = {name:'',message:''}
// function Greeter(props) {
//     console.log(props)
//     return <h1>{props.message} {props.name}</h1> //return object - object 
// }
// const Greeter = props => <h1>{props.message} {props.name}</h1>

const Greeter = ({ message, name }) => <h1>{message} {name}</h1>


//Parent Compoent
const App = () => {
    //return Greeter('Hai', 'Subramanian')
    //local variable 
    const name = "Ram"
    const message = "Welcome"
    return <div>
        <Greeter message="Hello" name="Subramanian" />
        <Greeter message="Hello" name="Geetha" />
        <Greeter message="Hello" name="Priya" />
        <Greeter message={message} name={name}  />

    </div>
}

ReactDOM.render(<App />, document.getElementById('root'))
.................................................................................
			.........
			Single Directional /Uni directional data flow Model 
..............................................................................................

Uni directional data flow model is nothing but passing data from the parent compoent to child components only.
.............................................................................................
			 Components Design and Properties
.............................................................................................

Components in the tree going to get data from the parent component only, even if the components are in the nested.


Break the UI into components, pass data from parent to child

Use case: -  Requirement

    Profile
	id
        firstName
        lastName
        MiddleName
        gender
        address
        email
        phone
        status
        company
        expereince
        education
        skills
    ........
    DashBoard
         AccountSummary
		Name,AccountNo,Branch,AccountBalance
         Transaction
		Narration,date,type,closingbalance
         Fund Transfer
		Name,bank,Branch,ifccode, actions

.............................................................................................

Convert the Profile requirement into Components.

ProfileComponent
	id
	status
        skills
NameComponent
        firstName
        lastName
        MiddleName
GenderComponent
        gender
AddressComponent
        address
ContactComponent
        email
        phone
CompanyComponent
        company
ExperienceCompoent
        expereince
EducationCompoent
        education
           -school
           -degree
	   

src/index.js

import React from "react";
import ReactDOM from "react-dom";
import 'bootstrap/dist/css/bootstrap.css'
import { Profile } from "./profile";

const App = () => {
    return <Profile id={100} firstName="Subramanian" middleName="" lastName="Murugan" />
}


ReactDOM.render(<App />, document.getElementById('root'))


src/profile/profile.jsx

import React from 'react';
import { Name } from './'
import { Address } from '../address'


export const Profile = props => <div>
    <h1>Profile Details</h1>
    <h4>id {props.id}</h4>
    <Name firstName={props.firstName} middleName={props.middleName} lastName={props.lastName} />
    <Address />
</div>


src/profile/name.jsx

import React from 'react';
export const Name = props => <div>
    <h4>First Name {props.firstName}</h4>
    <h4>Middle Name {props.middleName}</h4>
    <h4>Last Name{props.lastName}</h4>
</div>

src/profile/index.js

import { Name } from "./name";
import { Profile } from "./profile";

export { Name, Profile }


Assingment:
  Write all the Profile components, pass data show all profile data.
.....................................................................................
			    class Components and props
..............................................................................................

class Profile extends React.Component {
    
    render(){
        return <div className="container">
                <h1>Profile details</h1>
        </div>
    }
}

In the class components  how to access props?

 React.Component base class has instance variable "props" , this variables gets initalized when ever we pass props


=>In side Component class , props instance variable by default gets initalized with empty literal object

   class Compoent{
     props = {};
   }
=> As soon as we pass properties , props instance variable's object gets augmented(added)

function props vs class props

=>function props are passed as parameter
=>class props are initalized with help of instance variable
import React from "react";
import ReactDOM from "react-dom";
import 'bootstrap/dist/css/bootstrap.css'

//class component
class Profile extends React.Component {

    render() {
        //this.props is inside variable of React.Component class
        console.log(this.props)
        const { id, firstName } = this.props
        return <div>
            <h1>Profile details</h1>
            {/* <h1>Id {this.props.id}</h1>
            <h1>Name {this.props.firstName}</h1> */}
            <h1>Id {id}</h1>
            <h1>Name {firstName}</h1>
        </div>
    }
}


const App = () => {
    return <Profile id={1} firstName="Subramaian" />
}

ReactDOM.render(<App />, document.getElementById('root'))
....................................................................................
				Default Props

import React from "react";
import ReactDOM from "react-dom";
import 'bootstrap/dist/css/bootstrap.css'

const Profile = props => {
    return <div className="container">
        <h1>Profile details</h1>
        <h2>Id : {props.id}</h2>
        <h2>Name {props.name.toUpperCase()}</h2>
        <h2>Status {props.status ? "Avaiable" : "Not Available"}</h2>
    </div>
}
//defaultProps : default Props are supplied suppose if there is no property given 
/**
 * 
 * ComponentName.defaultProps = {
 *  prop1:defaultValue
 * }
 */
Profile.defaultProps = {
    id: 0,
    name: '',
    status: false
}



const App = () => {
    return <div>
        <Profile id={1} name="Subramaian" status={true} />
        <Profile />
    </div>
}

ReactDOM.render(<App />, document.getElementById('root'))

Note:
defaultProps are also available for class Components
...................................................................................
			Prop Validation /prop Constraints
...................................................................................

Javascript is type less 

let i=10;

i="Hello"

This is valid

if you are passing prop, you want to enforce rules like 'id" must be number
name must be string.

Yes , we can do with help of property validator.
Property validator gives only warning , it wont stop rendering incase there is any type error.

			Property Validation or Property Constraints
.............................................................................................

Javascript is dynamic typed language, meaning that the type of variable is not verified during compile time.

dyamic typed/weak typing

var a=1;
console.log(a) => 1 => type is number

you can reinitalize the with different types
a="hello"
console.log(a) => "hello" => type is string

In c: - Strongly typed  /static typed
int a=10
a="hello" -compile time error 

Type script : Strongly static typed javascript

let a:number =10;
a="hello"

Inside compoent if pass data , can i enforce the react that accept only the type what i want.

Yes , we can do with help of property validator.
Property validator gives only warning , it wont stop rendering incase there is any type error.


in order to write property rule, react provides a separate lib "prop-types"

Steps:
npm install --save prop-types


import React from "react";
import ReactDOM from "react-dom";
import 'bootstrap/dist/css/bootstrap.css'
import PropTypes from 'prop-types';

const Profile = props => {
    return <div className="container">
        <h1>Profile details</h1>
        <h2>Id : {props.id}</h2>
        <h2>Name {props.name.toUpperCase()}</h2>
        <h2>Status {props.status ? "Avaiable" : "Not Available"}</h2>
    </div>
}
//if you dont pass any property, we can supply default props which saves lot of runtime bugs.
Profile.defaultProps = {
    id: 0,
    name: 'default',
    status: false
}
//set property validation rules for property
Profile.propTypes = {
    //rules for property
    id: PropTypes.number,
    name:PropTypes.string,
    status:PropTypes.bool
}

const App = () => {
    return <div>
        <Profile id={"a;dfjsadlf"} name="ram" status={"test"} />

    </div>
}
ReactDOM.render(<App />, document.getElementById('root'))

Output:
Warning: Failed prop type: Invalid prop `id` of type `string` supplied to `Profile`, expected `number`.
    at Profile (http://localhost:3000/static/js/bundle.js:38:33)
    at App
.....................................................................................
		    Functional Programming Principles and React
....................................................................................
Compoent Design Principles:

	Component is designed based on "functional programming principles".
 React lib has been designed based on functional programming principles.


Functional Programming principles:

1.pure functions

 in order to certifiy the function is pure , there are two rules.

A.function receives the set of args, which should return the same.


//pure function.

//pure function or not
function getMessage(message) {
    return message;
}
console.log(getMessage('hello'))

//impure function
function calculate(a) {
    let b = 100;
    // let res = a * 10
    // return res;
    return a * b;
}


function should not do any "side effects"(changing the input parameters, local variable,IO operation), if fun does, that function is called "impure function".


In React where pure function is used.
 
  In the component design.

        "Every Component is pure function with respect to props"

 Every component receives props as parameter , returns the same without mutation(side effects).

import React from "react";
import ReactDOM from "react-dom";
import 'bootstrap/dist/css/bootstrap.css'

//This function is pure function : function gets props as input and return as it is without muation.
const Greeter = props => {
    return <div>
        <h1>Hello {props.name}</h1>
    </div>
}

const App = () => <div>
    <Greeter name="Subramnaian" />
</div>
ReactDOM.render(<App />, document.getElementById('root'))

		    "Props are readonly"  -props should not/cant be changed


B. to be discussed later.
.....................................................................................
..............................................................................................
				Property Rethrow
..............................................................................................

If a component receives property, the same set of property to be passed down to its childern.
		
import React from 'react';
import ReactDOM from 'react-dom'

//Master - Component - Parent
const ProfileMaster = props => {
    // return <ProfileDetails id={props.id} name={props.name} city={props.city} status={props.status} />
    //you dont need to pass indiduval property manually
    //we can use ES 7 "spread operator ..."

    return <ProfileDetails {...props} title="Profile details" />
}
//details Components - Child
const ProfileDetails = props => {
    return <div>
        <h1>{props.title}</h1>
        <h1>id {props.id}</h1>
        <h1>Name {props.name}</h1>
        <h1>City {props.city}</h1>
        <h1>Status {props.status ? "available" : "Not Available"}</h1>
    </div>

}

const App = props => {
    return <div>
        <ProfileMaster id={1} name="subramanian" status={true} city="coimbatore" />
    </div>
}


ReactDOM.render(<App />, document.getElementById('root'))



ReactDOM.render(<App />, document.getElementById('root'))


In the above code , we pass property to child component after reteriving manually ,This makes your code so complex

There is way to simplify the code using E6 "Spread Operator ..."
.....................................................................................
..............................................................................................
				What  can be a prop
.............................................................................................

Prop can be 

1.data - numbers,strings,boolean,objects,arrays
2.function - function as prop
3.component /any html element can be prop

Prop can be 

1.static prop - discussed already
2.dynamic prop 
....................................................................................
			  Component As Prop
....................................................................................


return <Layout/>

<Layout>
     ? - Here you can pass any other component /html element-Component as Prop
</Layout>

import React from 'react';
import ReactDOM from 'react-dom'

//Layout

const Layout = props => <div>
    {/* insert children */}
    {props.children}
</div>

const Header = props => <nav>
    <h1>Header</h1>
    {props.children}
</nav>
const MenuBar = () => <nav>
    <a href="#">Services</a>
</nav>

const Body = () => <div>
    <p>This is body</p>
</div>
const App = props => {
    return <div>
        <Layout>
            {/* Component as prop */}
            <Header>
                <MenuBar />
            </Header>
            <hr />
            <Body />
        </Layout>
    </div>
}


ReactDOM.render(<App />, document.getElementById('root'))

.....................................................................................
..............................................................................................
				Lists(Arrays) and Keys
..............................................................................................

How to render list of components / data?

Javascript provides an array to store data.

Array of primitives
Array of objects

//List
import React from 'react';
import ReactDOM from 'react-dom'
import TODOS from './mock-data/todos'
import 'bootstrap/dist/css/bootstrap.css'

const List = props => {
    return <div>
        {/* List view */}
        <ul>
            {/* map is pure function */}
            {/* {props.numList.map(i => {
                return <li>{i}</li>
            })} */}
            {props.numList.map(i => <li key={i}>{i}</li>)}
        </ul>

    </div>
}

const Todo = props => <div>
    {/* Card View */}
    {
        props.todos.map(todo => {
            return <div className="card" key={todo.id}>
                <div className="card-body">
                    <h1>{todo.id}</h1>
                    <h3>{todo.title}</h3>
                </div>
            </div>
        })
    }
</div>


const App = props => <div>
    <List numList={[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]} />
    <Todo todos={TODOS} />
</div>

ReactDOM.render(<App />, document.getElementById('root'))
...................................................................................................................................................................................
				     State
.............................................................................................

..............................................................................................
				 Dynamic Data- How to Mutate data
..............................................................................................

How to mutate data inside component?

With Respect to props, data cant be changed by the component.

What if i want to change the data?
  There is pattern called state pattern.

React versions : React 0, 1,2,3,14,15, - (16,17,18)

In Old React (pre 16), state pattern can be introduced only inside "class Component".

The word state means data of component.

React.Component class has instance variable called "state"

state
 The state contains data specific to this component that may change over time.
 The state is user-defined, and it should be a plain JavaScript object.

state variable's default value is "null".
we are expected to initalize the data of the component inside object and assign that object to state variable.

state = {


}
Features of state:

1.state is always "object" - we need to encapsulate the data inside literal object like props.

Steps: 
1.declare component class and initalize the state variable,bind in the UI

import React from 'react';
import ReactDOM from 'react-dom'

//state 
class Counter extends React.Component {
    //initalize the state 
    state = {
        //here your component specific data
       counter:0  //initalize state //
    };

    render() {
        console.log(this.state)
        return <>
            <h1>Counter Application</h1>
            <h3>Counter : {this.state.counter}</h3>
        </>
    }

}

const App = () => <div>
    <Counter />
</div>

ReactDOM.render(<App />, document.getElementById('root'))

..............................................................................................
				User Interaction and Components
.............................................................................................

Any UI is subject to user interaction.

How to interact with User interface?
 "Event Handling"

Handling Events:
..................

Handling events with React elements is very similar to handling events on DOM elements.

There are some syntax differences:

React events are named using camelCase, rather than lowercase.
With JSX you pass a function as the event handler, rather than a string.

HTML:
<button onclick="activateLasers()">
  Activate Lasers
</button>
JSX:
<button onClick={method}>
  Activate Lasers
</button>

Step 2: Declare Event Listener , bind Event Listener with button

import React from 'react';
import ReactDOM from 'react-dom'

//state 
class Counter extends React.Component {
    //initalize the state 
    state = {
        //here your component specific data
        counter: 0  //initalize state //
    };

    //event listner
    onIncrement = () => {
        alert('button')
    }

    render() {
        console.log(this.state)
        return <>
            <h1>Counter Application</h1>
            <h3>Counter : {this.state.counter}</h3>
            <button onClick={this.onIncrement}>+</button>
        </>
    }

}

const App = () => <div>
    <Counter />
</div>

ReactDOM.render(<App />, document.getElementById('root'))



How React updates UI?

via "render method"

render:
 
=>it is method called by "react engine".
     can we call render directly inside event listener?
        Yes,but no impact on ui update 
    onIncrement = () => {
         //increment value of state 
        this.state.value = this.state.value + 1
        console.log("value : ",this.state.value)
        this.render()
    }
   Note : render should not be called directly

How to call render?
render is called by react engine only.
how react engine will triger render?
  via React api "setState() ,forceUpdate()"


Syntax:

setState(updater, [callback])

updater = it is function
callback =it is also function which optional parameter

updater:
 function having state mutation logic

step1:
    this.setState(function(){
            console.log('state mutation logic goes')
        })

updater function syntax:

takes two args

1.state  is just variable you can have any name - holds the value of state object
 which is called as "previous state" or "old state"
2.props is just variable holding current props variable- which is optional

function(state,[props]){
            console.log('state mutation logic goes')
}

function(prevState){
            console.log('state mutation logic goes')
}

Updater function returns object, what object, if you want to understand this , we need to under one more functional programming principle called "Pure function 2nd Rule".

Updater function returns object, what object, if you want to understand this , we need to understand one more functional programming principle called "Pure function 2nd Rule".


Pure Functions:

Rule A:
  If function receives input, the function returns the same input without any mutation.
  Every Component with respect to props, are pure functions.

Rule B:

 What if function receives input, need to be mutated but it should follow the pure function rule.

With help of "Immutablity"

What is immutable?

creating new object every time when you update the object , immutablity.

if the function does that , that function is called pure function.

pure function must return, "immutable object".

//Pure functions :2nd rule

//Impure function : it changes the input parameter
function updateProfile_(profile, city) {
    //update city and return updated profile object: 
    profile.city = city
    return profile;
}
//Pure function : i need to change the input parameter but it should be pure.
function updateProfile(profile, city) {
    //update city and return updated profile object: 
    //return new Object ,by copying all properties ,with updated

    //in order to return new Object we have many synatx
    //old syntax : we copy object properties manually 
    // return {
    //     id: profile.id,
    //     name: profile.name,
    //     city: city
    // }
    //2nd syntax:
    // return Object.assign({}, profile, { city: city })
    //3rd syntax: spread notation
    return { ...profile, city }
}

let profile = {
    id: 1,
    name: 'Subramanian',
    city: 'Chennai'
}
// console.log('Before Update', profile)
// console.log('After Update', updateProfile(profile, 'Coimbatore'))
let updatedProfile = updateProfile(profile, 'Coimbatore')
console.log(profile === updatedProfile ? "Same Object " : " Different Object")

What you can make immutable?

->literal objects
->Array objects

//Pure functions :2nd rule

//Impure function : it changes the input parameter
function updateProfile_(profile, city) {
    //update city and return updated profile object: 
    profile.city = city
    return profile;
}
//Pure function : i need to change the input parameter but it should be pure.
function updateProfile(profile, city) {
    //update city and return updated profile object: 
    //return new Object ,by copying all properties ,with updated

    //in order to return new Object we have many synatx
    //old syntax : we copy object properties manually 
    // return {
    //     id: profile.id,
    //     name: profile.name,
    //     city: city
    // }
    //2nd syntax:
    // return Object.assign({}, profile, { city: city })
    //3rd syntax: spread notation
    return { ...profile, city }
}

let profile = {
    id: 1,
    name: 'Subramanian',
    city: 'Chennai'
}
// console.log('Before Update', profile)
// console.log('After Update', updateProfile(profile, 'Coimbatore'))
let updatedProfile = updateProfile(profile, 'Coimbatore')
console.log(profile === updatedProfile ? "Same Object " : " Different Object")

//arrays and immutatblity
//impure
// function addTodo(todos, newTodo) {
//     return todos.push(newTodo)
// }
//pure : how to return array immutable
function addTodo(todos, newTodo) {
    //return todos.concat(newTodo)
    return [...todos,newTodo]
}
let todos = [{
    title: 'Learn react',
    done: true
}];

Object.freeze(todos)
console.log(addTodo(todos, { title: 'Learn Pure functions', done: false }))

List of Array immutable apis:

1.concat
2.map
3.filter
3.reduce

updaterFunction Return value:

=>Should return always immutable object.

                    "setState method is pure function"


import React from 'react';
import ReactDOM from 'react-dom'

//state 
class Counter extends React.Component {
    //initalize the state 
    state = {
        //here your component specific data
        counter: 0  //initalize state //
    };

    //event listner
    onIncrement = () => {
        // this.state.counter = this.state.counter + 1
        // console.log("Inside Listener => ", this.state.counter);
        // //trigger setState method
        // this.setState(function (prvState) {
        //     console.log("old state => ", prvState)
        //     // return {
        //     //     counter: prvState.counter + 1
        //     // }
        //     // return Object.assign({}, prvState, { counter: prvState.counter + 1 })
        //     return { ...prvState, counter: prvState.counter + 1 }
        // })
        this.setState((prvState) => {
            console.log("old state => ", prvState)
            return { ...prvState, counter: prvState.counter + 1 }
        })
    }

    render() {
        console.log("Current State => ", this.state)
        return <>
            <h1>Counter Application</h1>
            <h3>Counter : {this.state.counter}</h3>
            <button onClick={this.onIncrement}>+</button>
        </>
    }

}

const App = () => <div>
    <Counter />
</div>

ReactDOM.render(<App />, document.getElementById('root'))
..............................................................................................
				Event Binding Syntaxs:

import React from 'react';
import ReactDOM from 'react-dom'

//state 
class Counter extends React.Component {
    //initalize the state 
    state = {
        counter: 0
    };

    //event listner
    onIncrement = () => {
        this.setState((prvState) => {
            console.log("old state => ", prvState)
            return { ...prvState, counter: prvState.counter + 1 }
        })
    }

    render() {
        console.log("Current State => ", this.state)
        return <>
            <h1>Counter Application</h1>
            <h3>Counter : {this.state.counter}</h3>
            <button onClick={this.onIncrement}>+</button>
            <button onClick={() => {
                this.setState(prvState => ({ ...prvState, counter: prvState.counter - 1 }))
            }}>-</button>

        </>
    }

}

const App = () => <div>
    <Counter />
</div>

ReactDOM.render(<App />, document.getElementById('root'))


...................
//state :
import React from 'react'
import ReactDOM from 'react-dom'


class Cart extends React.Component {
    state = {
        items: []  //inital state
    }
    //event listener
    onAdd = () => {
        this.setState(prevState => {
            return {
                items: prevState.items.concat("Item")
            }
        })
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Cart - Using State</h1>
            <ul>
                {this.state.items.map(item => {
                    return <li>{item}</li>
                })}
            </ul>
            <button onClick={this.onAdd} >Add To Cart</button>
        </div>
    }
}




const App = () => <div>
    <Cart />
</div>
ReactDOM.render(<App />, document.getElementById('root'))

.....................................................................................


//state :
import React from 'react'
import ReactDOM from 'react-dom'

/**
 * String str="hello"
 * String newStr = str.toUpperCase()
 * str memory location and newStr memoryLocation
 */

class Counter extends React.Component {
    state = {
        count: 0
    }
    //event listener
    onIncrement = () => {
        this.setState(prevState => {
            console.log("old State =>", prevState)
            return { ...prevState, count: prevState.count + 1 }
        })
    }


    render() {
        console.log("current State =>", this.state)
        return <div>
            <h1>CounterApp - Using State</h1>
            <h2>Counter : {this.state.count}</h2>
            <button onClick={this.onIncrement} >+</button>
            {/* Inline listener */}
            <button onClick={()=>{
                this.setState((prevState)=>({prevState,count: prevState.count -1}))
            }} >-</button>

        </div>
    }
}


const App = () => <div>
    <Counter />
</div>
ReactDOM.render(<App />, document.getElementById('root'))
..................................................................................
				Multi state
....................................................................................
import React from 'react';
import ReactDOM from 'react-dom'

//state 
class Counter extends React.Component {
    //initalize the state 
    state = {
        incValue: 10,
        decValue: 100
    };

    //event listner
    onIncrement = () => {
        this.setState((prvState) => {
            console.log("old state => ", prvState)
            return { ...prvState, incValue: prvState.incValue + 1 }
        })
    }

    render() {
        console.log("Current State => ", this.state)
        return <>
            <h1>Counter Application</h1>
            <h3>Increment Value : {this.state.incValue} - Decrement Value {this.state.decValue}</h3>
            <button onClick={this.onIncrement}>+</button>
            <button onClick={() => {
                this.setState(prvState => ({ ...prvState, decValue: prvState.decValue - 1 }))
            }}>-</button>

        </>
    }

}

const App = () => <div>
    <Counter />
</div>

ReactDOM.render(<App />, document.getElementById('root'))
...................................................................................
			  State and Prop 
...................................................................................

Container component
   Component having state,bizlogic
Presentational component
  component having only ui

Dynamic props, state as prop, function as prop

//state :
import React from 'react'
import ReactDOM from 'react-dom'


//having : state + biz logic + ui
class Counter extends React.Component {
    state = {
        count: 0  //inital state
    }
    //event listener
    onIncrement = () => {
        this.setState(prevState => ({ ...prevState, count: prevState.count + 1 }))
    }
    render() {
        return <div>
            {/* dynamic props , function as prop */}
            <CounterUI count={this.state.count} onIncrement={this.onIncrement} />
        </div>
    }
}

//functional component 
const CounterUI = props => {
    return <div>
        <h1>CounterApp - Using State</h1>
        <h2>Counter : {props.count}</h2>
        <button onClick={props.onIncrement} >+</button>
    </div>
}


const App = () => <div>
    <Counter />
</div>
ReactDOM.render(<App />, document.getElementById('root'))
.....................................................................................
..............................................................................................
		 How to get Input from the User -How to use Syn Event Object
...........................................................................................

SyntheticEvent object is passed as arg to event listner

 onIncrement = (evt) => {
        
 }

import React, { Component } from 'react';
import ReactDOM from 'react-dom'
import 'bootstrap/dist/css/bootstrap.css'


class UserInput extends Component {
    state = {
        text: 'default'
    }
    onUpdate = evt => {
        //read textbox value
      const value= evt.target.value
      this.setState(prevState=>({...prevState,text:value}))
    }

    render() {
        return <div className="container">
            <h1>User Input Application</h1>
            <h1> {this.state.text}</h1>
            <input onChange={this.onUpdate } />
        </div>
    }

}


const App = props => <div>
    <UserInput />
</div>
ReactDOM.render(<App />, document.getElementById('root'))
.....................................................................................

.............................................................................................
	   How to show data in the UI which was fetched from the WebServices
..............................................................................................

There are three possibilites you have when you do ajax calls

1.You may have data on time
2.You may not have data on time - delay or slow
    incase of slow data fetch we show "spinners"
3.you may get error
    server down,network failure,api malfunctions....

You have to write code according to state of api

 - success on time
 - success with spinner
 - error 

if you have to write if condition to check these three status, according to the status we switch mode.

How to write if ...else conditions in side jsx?
   Conditional Rendering


import React, { Component } from 'react';
import ReactDOM from 'react-dom'
import 'bootstrap/dist/css/bootstrap.css'

const Error = props => {
    return <>
        <h2>{props.error}</h2>
    </>
}
const Spinner = props => {
    return <>
        <h2 style={{ backgroundColor: 'yellow' }}>Loading...</h2>
    </>
}

class Todo extends Component {

    state = {
        error: null,
        isLoaded: false, //spiner status
        todos: [] // data
    }

    render() {
        const { error, isLoaded, todos } = this.state;
        if (error) {
            return <Error error={error} />
        } else if (!isLoaded) {
            return <Spinner />
        } else {
            return <TodoList todos={todos} />
        }

    }
    componentDidMount() {
        const url = 'https://jsonplaceholder.typicode.com/todos'
        fetch(url).then(response => response.json()).then(todos => {
            // console.log(todos)
            setTimeout(() => {
                this.setState(previousState => {
                    return { ...previousState, todos: previousState.todos.concat(todos), isLoaded: true };
                });
            }, 5000)

        }).catch(err => {
            // console.log(err)
            this.setState({
                isLoaded: true,
                err
            });
        });
    }
}

const TodoList = props => {
    const { todos } = props
    return <ul className="list-group">
        {todos.map((todo, index) => (
            <li key={index}>
                <span className="badge badge-pill badge-primary">
                    {todo.id}
                </span>
                <span>
                    {todo.title}
                </span>
            </li>
        ))}
    </ul>
}

const App = () => <div className="container">
    <Todo />
</div>

ReactDOM.render(<App />, document.getElementById('root'))
....................................................................................

..............................................................................................
				 Update
.............................................................................................

Update Phase gets trigger once , the component is mounted into DOM, when user starts interaction like clicking button, typing in the user....

An update can be caused by changes to props or state. These methods are called in the following order when a component is being re-rendered:

static getDerivedStateFromProps() - called both in mount and update cycle
shouldComponentUpdate() -
render()
getSnapshotBeforeUpdate()
componentDidUpdate()


import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import 'bootstrap/dist/css/bootstrap.css'

class ParentComponent extends Component {
    state = {
        i: 0
    }
    //mount phase methods
    constructor() {
        super()
        console.log('Parent Constructor is called')
    }


    render() {
        console.log('Parent render is called')
        return <div>
            <h1>Parent Component</h1>
            <h1>{this.state.i} </h1>
            <button onClick={() => {
                this.setState((oldstate) => ({ ...oldstate, i: oldstate.i + 1 }))
            }}>+</button>
            <ChildComponent {...this.state} />
        </div>
    }

    //after mount
    componentDidMount() {
        console.log('Parent ComponentDidMount is called')
    }
    componentDidUpdate(){
        console.log('Parent componentDidUpdate is called')
    }


}

class ChildComponent extends Component {

    //mount phase methods
    constructor() {
        super()
        console.log('ChildComponent Constructor is called')
    }
    render() {
        console.log('ChildComponent render is called', this.props)

        return <div>
            <h1>Child Component</h1>
        </div>
    }

    componentDidMount() {
        console.log('ChildComponent ComponentDidMount is called')
    }
    componentDidUpdate(){
        console.log('Child componentDidUpdate is called')
    }



}

ReactDOM.render(<ParentComponent />, document.getElementById('root'))
....................................................................................
				Hooks


Why hooks?

1. Code Resue
  if you to repeate biz logic of component , in class component is not possible
via hooks(functions) it is possible

2.Code reduction
  to eleminate lot of boiler plate code


What is hook?
 It is a new feature introduced in react 16.
 Simple abstraction for class compoents-  how to remove classes from react.

Intention is functional component for every things.

objective of hooks:

1.to eleminate class components as much possible.
2.Resuable application behaviours
   eg:ajax calls


Hook is just simple javascript function.
which may take arg or may not.
Which may or may not return something 	


every hook function starts with
  "use"+functionName ==>hook Syntax

eg:
"useState"
"useContext"
"useEffect"
"useAjax"
"useWebSocket"
"useLayout"
etc....
you can create your own hooks as well.

//state :
import React, { useState } from 'react'
import ReactDOM from 'react-dom'

// class Counter extends React.Component {

//     state = {
//         count: 0  //inital state
//     }
//     onIncrement = () => {
//         this.setState(prevState => ({ ...prevState, count: prevState.count + 1 }))
//     }

//     render() {
//         console.log(this.state)
//         return <div>
//             <h1>CounterApp - Using State</h1>
//             <h2>Counter : {this.state.count}</h2>
//             <button onClick={this.onIncrement} >+</button>
//         </div>
//     }
// }

const Counter = props => {
    //state 
    const [count, setCount] = useState(0)
    const [like, setLike] = useState(100)
    //literal object 
    const [counter, setCounter] = useState({ value: 10 })

    //listener
    const onIncrement = evt => {
        //state mutation
        // setCount(prevState => {
        //     return prevState + 1
        // })
        setCount(count + 1)
    }

    return <div>
        <h1>Counter App- Using hooks</h1>
        <h2>Counter: {count}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            setCount(count - 1)
        }}>-</button>
        <hr />
        <h2>Like {like}</h2>
        <button onClick={() => {
            setLike(like + 1)
        }}>Like</button>
        <hr />
        <h1>Literal Object {counter.value}</h1>
        <button onClick={() => {
            setCounter((oldState) => {
                return { ...oldState, value: oldState.value + 1 }
            })
        }}>Like</button>
    </div>
}

const App = () => <div>
    <Counter />
</div>
ReactDOM.render(<App />, document.getElementById('root'))
...................................................................................
			  Component Life cycles and Hooks
....................................................................................
comonentDidMount:
 Used for doing some resource intensive tasks, such as setting up ajax calls for inital page.
 It is called after inital render

compoentDidUpdate:
  called after every update finishes.

How to write these two life cycle methods inside functional components.
//hooks : componentDidMount - useEffect
import React, { useEffect, useState } from 'react'
import ReactDOM from 'react-dom'


const Todos = props => {
    //state
    const [state, setState] = useState({
        error: null,
        isLoaded: false, //spiner status
        todos: [] // data
    })

    //componentDidMount
    useEffect(() => {
        fetch('https://jsonplaceholder.typicode.com/todos')
            .then(response => response.json())
            .then(todos => {
                setTimeout(() => {
                    setState(prevState => ({ ...prevState, todos: prevState.todos.concat(todos), isLoaded: true }))
                }, 5000)
            })
            .catch(err => {
                setState(prevState => ({ ...prevState, isLoaded: true, error: err }))
            });
    }, [])

    //render code

    const { error, isLoaded, todos } = state;
    if (error) {
        return <Error error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <div>
            <h1>Todo App</h1>
            <ul>
                {state.todos.map(todo => {
                    return <li key={todo.id}>{todo.title}</li>
                })}
            </ul>
        </div>
    }



}

const Error = props => {
    return <>
        <h2>{props.error}</h2>
    </>
}
const Spinner = props => {
    return <>
        <h2 style={{ backgroundColor: 'yellow' }}>Loading...</h2>
    </>
}


const App = props => <div>
    <h1>Ajax calls inside FuncitionalComponent</h1>
    <Todos />
</div>

ReactDOM.render(<App />, document.getElementById('root'))
......................................................................................				State Outside Component
...................................................................................
How to mantain state outside component?

React is just view libs, which is going to have only view, what if your application grows, if you need to deal with more state.

if some state , i am going to resue inside many components across the applications

..............................................................................................
				     Redux
.............................................................................................

What is Redux?​
It helps to understand what this "Redux" thing is in the first place.
What does it do?
What problems does it help me solve? 
Why would I want to use it?

Redux is a "pattern and library" for managing and updating application state, using events called "actions".
It serves as a centralized store for state that needs to be used across your entire application, with rules ensuring that the state can only be updated in a predictable fashion.

       In the above defintion you can find out, only one thing in common - "state"

In React we manage state inside component - Statefull component.

if you want to share the data(state) there is only one pattern

Parent ---to---Child Pattern via props

What if i want to share the data across the application 

 Compoent to Component any where in the hierachy -  Redux.
.............................................................................................
				Redux Pattern- Flux Pattern
............................................................................................

Flux is design pattern , created by facebook in order to share the data among the ui(components) with proper channels(flow).

Face book initally designed the flux pattern and implemented this pattern via lib called flux.js

Now a days "flux.js" lib has been deprecated instead we have to use "redux/Mobx"

Flux design pattern has been implemented inside redux.
..............................................................................................
					Flux Pattern

In flux Pattern data is moved in unidirectional flow- one way data flow.

Flux Pattern Components:
.......................

1.View layer
   Just it presents The Application User face.
   React is view

2.State layer
   Flux.js / Redux / Mobx
   It manages the state(data), which maniuplates/updates the state for the entire application.
hen Should I Use Redux?​
   Redux helps you deal with shared state management, but like any tool, it has tradeoffs. There are more concepts to learn, and more code to write. It also adds some indirection to your code, and asks you to follow certain restrictions. It's a trade-off between short term and long term productivity.

Redux is more useful when:

1.You have large amounts of application state that are needed in many places in the app
2.The app state is updated frequently over time
3.The logic to update that state may be complex
4.The app has a medium or large-sized codebase, and might be worked on by many people


Redux Terms and Concepts​
........................

1.State Management​:

 The application is composed of different modules(UI).
If you take, Banking Application
 -transaction
 -User screen 
 -Deposit and withdrawal screen

The application state/ app state:
  The data of application, which mimics the database design in the server side apps.

How the database schema has collection of tables ,each table has data related to paricular domain like users,products.

The redux also maintains in memory database schema, which stores the data of UI modules.

                       "Redux stores the app state inside one single literal 
					 Object"


Redux database is "Single javascript literal Object"

eg:
  const appState = {
   
     screen1: {},
     screen2:{},
     screen3:{}     

  }
 const appState = {
   
     transaction: {}, =>Change state===> new AppState => Listener===>View will get fresh State
     user:{},
     accounts:{}     

  }

"one-way data flow":

1.State describes the condition of the app at a specific point in time.
2.The UI is rendered based on that state When something happens (such as a user clicking a button), the state is updated based on what occurred
3.The UI re-renders based on the new state
.............................................................................................

Actions
 An action is a plain JavaScript object that has a "type" field.
 You can think of an action as an event that describes something that happened in the application.

The type field should be a string that gives this action a descriptive name, like "todos/todoAdded".

We usually write that type string like "domain/eventName", where the first part is the feature or category that this action belongs to, and the second part is the specific thing that happened.

An action object can have other fields with additional information about what happened. By convention, we put that information in a field called payload.

syntax:

const increment = {
  type:"counter/increment",
}

const addTodo = {
  type:"todo/addTodo",
  payload : {id:1,text:'learn redux'}

}


Reducers:
   A reducer is a function that receives the current state and an action object, decides how to update the state if necessary, and returns the new state: (state, action) => newState. You can think of a reducer as an event listener which handles events based on the received action (event) type.

 Reducer is a pure function, which is eq to setState or useState in react.

Reducers must always follow some specific rules:

1.They should only calculate the new state value based on the state and action arguments

2.They are not allowed to modify the existing state. Instead, they must make immutable updates, by copying the existing state and making changes to the copied values.
3.They must not do any asynchronous logic, calculate random values, or cause other "side effects"

Syntax:
(state, action) => newState

function counter(state,action){

 switch(action.type){
     case "counter/increment":
 	return {...state,value:state.counter.value + 1}

     default:
        return state;     

 } 

}


Dispatchers /dispatch:
The Redux store has a method called dispatch.
The only way to update the state is to call store.dispatch() and pass in an action object. The store will run its reducer function and save the new state value inside, and we can call getState() to retrieve the updated value

const increment = {
  type:"counter/increment",
}

store.dispatch(increment)=>store.reducer()=>newState=>listener=>react rerender screen


Store:

 Store is object

Role of Store object:
1.stores the app state
2.control communication flows between UI and Redux.

Api:
1.getState()
2.dispatch(action)
3.subscribe(listener)
4.replaceReducer(nextReducer)
			 


//redux 
import React from "react";
import ReactDOM from "react-dom";
import { useSelector, Provider, useDispatch } from "react-redux";
import { createStore } from "redux";


//biz logic : reducer : pure function 
const counterReducer = (state = {
    count: 10
}, action) => {
    switch (action.type) {
        case 'counter/increment':
            //immutable logic
            return { ...state, count: state.count + 1 }
        default:
            return state;
    }
}
//create store 
const store = createStore(counterReducer)


//react

const Counter = props => {

    // How to access redux state from the react
    const counter = useSelector(state => {
        return state.count
    })
    const dispatch = useDispatch()

    //event listener
    const onIncrement = () => {
        //we need to call reducer , because the logic is written there only 
       //action 
        // const incrementAction = {
        //     type: 'counter/increment'
        // }
        // dispatch(incrementAction)
        dispatch({
            type: 'counter/increment'
        })
    }

    return <div>
        <h1>Counter App Using React - Redux</h1>
        <h1>Counter {counter}</h1>
        <button onClick={onIncrement}>+</button>
    </div>
}

const App = () => <div>
    {/* Provider injects  */}
    <Provider store={store}>
        <Counter />
    </Provider>
</div>

ReactDOM.render(<App />, document.getElementById('root'))
....................................................................................
				Multi Reducer
.....................................................................................

Multi Reducer- Multi component how to write logic

//redux 
import React from "react";
import ReactDOM from "react-dom";
import { useSelector, Provider, useDispatch } from "react-redux";
import { createStore, combineReducers } from "redux";


const incrementReducer = (state = {
    count: 10
}, action) => {
    switch (action.type) {
        case 'counter/increment':
            //immutable logic
            return { ...state, count: state.count + 1 }
        default:
            return state;
    }
}

const decrementReducer = (state = {
    count: 10
}, action) => {
    switch (action.type) {
        case 'counter/decrement':
            //immutable logic
            return { ...state, count: state.count - 1 }
        default:
            return state;
    }
}

const rootReducer = combineReducers({
    increment: incrementReducer,
    decrement: decrementReducer
})
//create store 
const store = createStore(rootReducer)
//react

const Increment = props => {
    // How to access redux state from the react
    //multi reducer :
    const counter = useSelector(globalState => {
        //globalState.reducerName.yourState
        console.log(globalState)
        return globalState.increment.count;
    })
    const dispatch = useDispatch()

    //event listener
    const onIncrement = () => {
        dispatch({
            type: 'counter/increment'
        })
    }

    return <div>
        <h1>Counter App Using React - Redux-Increment</h1>
        <h1>Counter {counter}</h1>
        <button onClick={onIncrement}>+</button>
    </div>
}

const Decrement = props => {

    // How to access redux state from the react
    const counter = useSelector(globalState => {
        //globalState.reducerName.yourState
        console.log(globalState)
        return globalState.decrement.count;
    })
    const dispatch = useDispatch()

    //event listener
    const onDecrement = () => {
        dispatch({
            type: 'counter/decrement'
        })
    }

    return <div>
        <h1>Counter App Using React - Redux-Decrement</h1>
        <h1>Counter {counter}</h1>
        <button onClick={onDecrement}>-</button>
    </div>
}

const App = () => <div>
    {/* Provider injects  */}
    <Provider store={store}>
            <Increment />
            <hr />
            <Decrement/>
    </Provider>
</div>

ReactDOM.render(<App />, document.getElementById('root'))
..................................................................................
			 Passing input from react to redux-Payload

how to pass input?
via actions

let incrementByAmount = { 
  type:'counter/incrementByAmount',
  payload:10
 
}
//redux 
import React from "react";
import ReactDOM from "react-dom";
import { useSelector, Provider, useDispatch } from "react-redux";
import { createStore, combineReducers } from "redux";


const incrementReducer = (state = {
    count: 10
}, action) => {
    switch (action.type) {
        case 'counter/incrementByAmount':
            //immutable logic
            return { ...state, count: state.count + action.payload }
        default:
            return state;
    }
}

const decrementReducer = (state = {
    count: 10
}, action) => {
    switch (action.type) {
        case 'counter/decrement':
            //immutable logic
            return { ...state, count: state.count - 1 }
        default:
            return state;
    }
}

const rootReducer = combineReducers({
    increment: incrementReducer,
    decrement: decrementReducer
})
//create store 
const store = createStore(rootReducer)
//react

const Increment = props => {
    // How to access redux state from the react
    //multi reducer :
    const counter = useSelector(globalState => {
        //globalState.reducerName.yourState
        console.log(globalState)
        return globalState.increment.count;
    })
    const dispatch = useDispatch()

    //event listener
    const onIncrement = () => {
        dispatch({
            type: 'counter/incrementByAmount',
            payload: 10
        })
    }

    return <div>
        <h1>Counter App Using React - Redux-Increment</h1>
        <h1>Counter {counter}</h1>
        <button onClick={onIncrement}>+</button>
    </div>
}

const Decrement = props => {

    // How to access redux state from the react
    const counter = useSelector(globalState => {
        //globalState.reducerName.yourState
        console.log(globalState)
        return globalState.decrement.count;
    })
    const dispatch = useDispatch()

    //event listener
    const onDecrement = () => {
        dispatch({
            type: 'counter/decrement'
        })
    }

    return <div>
        <h1>Counter App Using React - Redux-Decrement</h1>
        <h1>Counter {counter}</h1>
        <button onClick={onDecrement}>-</button>
    </div>
}

const App = () => <div>
    {/* Provider injects  */}
    <Provider store={store}>
        <Increment />
        <hr />
        <Decrement />
    </Provider>
</div>

ReactDOM.render(<App />, document.getElementById('root'))
....................................................................................
Actions:
 action :
   Object which  describes what to do
   which is transported by dispatcher via dispatch method
   action must have type property
   action may have payload

const myaction = {
  type:'counter/increment'  
}

here 'counter/increment' is hardcoded which is not recommended -

  action constant
const INCREMENTBYAAMOUTACTION = 'counter/incrementByAmount'

...
action creator:

action creator is function which returns action object
action creators are used to get dynamic action input 

function incrementByAmount(payload){

     return {
            type: INCREMENTBYAAMOUTACTION,
            //payload: payload
	    payload
        }
}

//action creator
    const incrementByAmount = payload => ({
        type: INCREMENTBYAAMOUTACTION,
        payload
    })

   //event listener
    const onIncrement = () => {
        dispatch(incrementByAmount(10))
    }
....................................................................................
			 Async operations in redux

In react async operations- webservice calls we can done inside component using fetch api.

Middleware is function which gets called before reducer is called.
Middlewares are used for some preprocessing.

Use cases of middlewares:

1.logging
2.asynchronous API calls

Middleware is  higher order function/curry function.

General Syntax:

const logger = store => next => action => {
  console.log('dispatching', action)
  let result = next(action)
  console.log('next state', store.getState())
  return result
}

function logger(store){
    return function(next){
         return function(action){
		//middleware code
            let res = next(action);
            return next;
         }
   }

}
store: current store object is passed
next: function which helps to move from the current middleware to next middlewares
action: you can access action object.

With out Middleware:

store.dispatch(action)====>store==>invoke reducer===return state==>listner is called

with middlware

store.dispatch(action)== M1--M2--M3--MN ==>==>invoke reducer===return state==>listner is called

in order to integrate middleware work flow, redux offers applyMiddleware function,which need to passed as parameter to the createStore function




import { redux, combineReducers, applyMiddleware, createStore } from 'redux'
import React from 'react'
import ReactDOM from "react-dom"
import { Provider, useSelector, useDispatch } from "react-redux";

const initState = {
    value: 20
}
//it is eq to setState in react
const counterReducer = (state = initState, action) => {
    console.log('Previous State => ', state)
    switch (action.type) {
        case 'counter/increment':
            return { ...state, value: state.value + 1 }
        case 'counter/incrementByAmount':
            return { ...state, value: state.value + action.payload }
        default:
            return state;//default state
    }
}
const welcome = store => next => action => {
    //middleware code
    let res = next(action);
    console.log("Welcome to ", action)
    return next;
}

const rootReducer = combineReducers({ counter: counterReducer })
const store = createStore(rootReducer, applyMiddleware(welcome))

const Heading = props => <header>
    {props.title} {props.children}
</header>

const Counter = props => {
    const value = useSelector(state => state.value)
    const increment = useDispatch();
    const incrementByAmount = useDispatch();

    const onIncrement = () => {
        increment({ type: 'counter/increment' })
    }
    return <div>
        <Heading>
            <h1>Counter Application- React -redux</h1>
        </Heading>
        <Heading>
            <h2>Counter : {value}</h2>
        </Heading>
        <button onClick={onIncrement}>Increment</button>
        <button onClick={() => {
            incrementByAmount({ type: 'counter/incrementByAmount', payload: 10 })
        }}>IncrmentByAmount</button>
    </div>
}

const App = () => <>
    <Provider store={store}>
        <Counter />
    </Provider>
</>
ReactDOM.render(<App />, document.getElementById('root'))
....................................................................................
			 async operations - webservice calls using middleware



There are lot of async middlewares

1.thunk
2.redux-promise
3.redux-observable - based on lib called "rxjs"
4.saga


Thunk:
 for any async work flow -timers,ajax

npm install redux-thunk


import { applyMiddleware, createStore } from "redux";
import React, { useEffect } from 'react'
import ReactDOM from "react-dom"
import { Provider, useSelector, useDispatch } from "react-redux";
import thunk from 'redux-thunk'

const initState = {
    value: 20,
    isLoading: true
}
//it is eq to setState in react
const counterReducer = (state = initState, action) => {
    switch (action.type) {
        case 'counter/increment':
            return { ...state, value: state.value + 1,isLoading:false }
        case 'counter/incrementByAmount':
            return { ...state, value: state.value + action.payload }
        default:
            return state;//default state
    }
}
//action creator, which returns action with delayed manner

const incrementActionCreator = () => {
    return {
        type: 'counter/increment'
    }
}
//action creator
function incrementAsync() {
    //middlware function
    return dispatch => {
        setTimeout(() => {
            // Yay! Can invoke sync or async actions with `dispatch`
            dispatch(incrementActionCreator())
        }, 5000)
    }
}



//create store object
const store = createStore(counterReducer, applyMiddleware(thunk));

const Counter = props => {
    const value = useSelector(state => state.value)
    const isLoading = useSelector(state => state.isLoading)
    const increment = useDispatch();
    const incrementByAmount = useDispatch();

     useEffect(()=>{
        increment(incrementAsync())
     },[])

    const onIncrement = () => {
        console.log(isLoading)
        increment(incrementAsync())
    }
    return <div>
        <h1>Async Counter Application- React -redux</h1>
        <h2>Counter : {isLoading ? "Loading" : value}</h2>
        <button onClick={onIncrement}>Increment</button>
        <button onClick={() => {
            incrementByAmount({ type: 'counter/incrementByAmount', payload: 10 })
        }}>IncrmentByAmount</button>
    </div>
}

const App = () => <>
    <Provider store={store}>
        <Counter />
    </Provider>
</>
ReactDOM.render(<App />, document.getElementById('root'))
....................................................................................
			Ajax call

import { applyMiddleware, createStore } from "redux";
import React, { useEffect } from 'react'
import ReactDOM from "react-dom"
import { Provider, useSelector, useDispatch } from "react-redux";
import thunk from 'redux-thunk'

//action creator, which returns action with delayed manner


const todosReducer = (state = [], action) => {
    switch (action.type) {
        case 'todos':
            return state.concat(action.payload)
        default:
            return state;
    }
}

function todocreator(todos) {
    return {
        type: 'todos',
        payload: todos
    }
}
function todosAsync() {
    return dispatch => {
        fetch('https://jsonplaceholder.typicode.com/todos').then(res => {
            res.json().then(todos => {
                dispatch(todocreator(todos));
            });
        })

    }
}


//create store object
const store = createStore(todosReducer, applyMiddleware(thunk));

const Todos = props => {
    const todos = useSelector(state => state);
    const getTodos = useDispatch();
    useEffect(() => {
        getTodos(todosAsync())
    }, [])
    return <div>
        <h1>Todos App</h1>
        <ul>
            {todos.map(todo => <li key={todo.id}>
                <span>{todo.title}</span>
            </li>)}
        </ul>
    </div>
}

const App = () => <>
    <Provider store={store}>
        <Todos />
    </Provider>
</>
ReactDOM.render(<App />, document.getElementById('root'))
....................................................................................
				How to menu driven app- SPA
.....................................................................................
//router
import React, { useEffect } from 'react'
import ReactDOM from "react-dom"
import { Provider, useSelector, useDispatch } from 'react-redux';
import { createStore } from 'redux';
import { BrowserRouter, Routes, Route, Link, Outlet } from 'react-router-dom';


//redux
//biz logic : reducer : pure function 
const counterReducer = (state = {
    count: 10
}, action) => {
    switch (action.type) {
        case 'counter/increment':
            //immutable logic
            return { ...state, count: state.count + 1 }
        default:
            return state;
    }
}
//create store 
const store = createStore(counterReducer)
/////////////////////////////////////////////////////////////////////////////////////
//react 
const Counter = props => {

    const counter = useSelector(state => {
        return state.count
    })
    const dispatch = useDispatch()

    //event listener
    const onIncrement = () => {

        dispatch({
            type: 'counter/increment'
        })
    }

    return <div>
        <h1>Counter App Using React - Redux</h1>
        <h1>Counter {counter}</h1>
        <button onClick={onIncrement}>+</button>
    </div>
}

//Layout
const Layout = () => {
    // menus
    return <div><nav>
        <ul>
            <li>
                <Link to="/">Home</Link>
            </li>
            <li>
                <Link to="/about">About</Link>
            </li>
            <li>
                <Link to="/dashboard">Dashboard</Link>
            </li>
            <li>
                <Link to="/transcations">Transactions</Link>
            </li>
            <li>
                <Link to="/counter">Redux-Counter</Link>
            </li>
        </ul>
    </nav>
        <hr />

        {/* An <Outlet> renders whatever child route is currently active,
        so you can think about this <Outlet> as a placeholder for
        the child routes we defined above. */}
        <Outlet />
    </div>
}

const Home = () => <h1>IBM-home</h1>
const About = () => <h1>IBM-about</h1>
const Dashboard = () => <h1>IBM-dashboard</h1>
const Transactions = () => <h1>TransactionPage</h1>




const App = () => {

    return <Provider store={store}>
        {/* Router */}
        <BrowserRouter>
            <Routes>
                {/* root route */}
                <Route path="/" element={<Layout />}>
                    {/* Child routes */}
                    <Route index element={<Home />} />
                    <Route path="about" element={<About />} />
                    <Route path="dashboard" element={<Dashboard />} />
                    <Route path="transcations" element={<Transactions />} />
                    <Route path="counter" element={<Counter />} />
                </Route>
            </Routes>
        </BrowserRouter>
    </Provider>
}

ReactDOM.render(<App />, document.getElementById('root'))






































