				   Node.js
.....................................................................................

What is Node.js?

Platform and runtime to javascript code.

Why Node.js?

To build nonblocking (async) socket/io applications

What is Nonblocking/async?



simple async :
//non blocking api using timers 
/**
 * 1.api must schdule task to the kernal
 * 2.kernal will emit event,so that event has to be processed
 * 3.in order to process event, we need listener - callback function 
 *   callback functions are used to handle result of nonblocking operations
 */

//callback style

function blockMe(message){
    console.log(message)
}

function delay(callback) {
    //api for nonblocking api 
    setTimeout(callback, 5000, "Hello,I am non blocking")
}

blockMe('start')
delay((data) => {
  console.log(data)
})
blockMe('end')

....................................................................................

Callback chaining: - output of one callback will be input to another callback


Questions:

1.Whether this code is able to understand quickly
2.Whether this code is able to debug
3.Whehter this code is scalable?
4.whether this code is maintaiable?

Yes
 "Callback Hell"

fs.readdir(source, function (err, files) {
  if (err) {
    console.log('Error finding files: ' + err)
  } else {
    files.forEach(function (filename, fileIndex) {
      console.log(filename)
      gm(source + filename).size(function (err, values) {
        if (err) {
          console.log('Error identifying file size: ' + err)
        } else {
          console.log(filename + ' : ' + values)
          aspect = (values.width / values.height)
          widths.forEach(function (width, widthIndex) {
            height = Math.round(width / aspect)
            console.log('resizing ' + filename + 'to ' + height + 'x' + height)
            this.resize(width, height).write(dest + 'w' + width + '_' + filename, function(err) {
              if (err) console.log('Error writing file: ' + err)
            })
          }.bind(this))
        }
      })
    })
  }
})

Callback Hell:

 -It is not bug or error in code
 -It is way of writing callback based program
 -Callback based non blocking programming hard to understand,maintain,debug,scale Which 
  called as "Callback Hell".

How to write better async/non blocking code without callbacks?

-Generally without callbacks not possible to write async/non blocking code.
-Rather we can abstract complexity of writting callbacks.


In 2005, JQUERY team started with working complex callback patterns, they found callback hell problem.

They proposed a  Design pattern to write better callback programming(Async) programming.

  "Promise".

Promise is design pattern which hides complexity of callback patterns


Since Promise is design pattern, many people have implemented Promise design pattern.

1.JQuery -first promise implementation
2.many libs and frameworks

...........................................................................................

In order standarize , ECMA committe decided to include Promise Design pattern at language level .(ES 6)
2012 E6 Committe introduced promise design pattern  as  "Promise" Object  in javascript.

Promises and non blocking,async and callback hell issues:
.........................................................

features of Promise Object:

1.Promise by deafult is Async. Which implements timer api with 0 ms .

Promise can be used with any async callback based  implementations.

Objective:

 To remove callbacks in async/non blocking code. write cleaner async programming.
 To remove complex callback chaining code.


//callback chaining
const getUser = () => {
    console.log('get User is called')
    return new Promise((resolve, reject) => {
        let user = { id: 1, name: 'admin' }
        // user = null
        if (user) {
            setTimeout(resolve, 1000, user);
        } else {
            setTimeout(reject, 1000, { err: 'User not found' });
        }
    })
}
const login = user => {
    console.log('login User is called')

    return new Promise((resolve, reject) => {
        let status = 'login success'
        let errorMessage = 'login failed'

        if (user.name === 'admin') {
            setTimeout(resolve, 1000, status);
        } else {
            setTimeout(reject, 1000, errorMessage);
        }
    })

}
const showDashboard = status => {
    console.log('showDashboard User is called')
    return new Promise((resolve, reject) => {
        let adminpage = 'Admin Page'
        let guestpage = 'Guest Page'

        if (status === 'login success') {
            setTimeout(resolve, 1000, adminpage);
        } else {
            setTimeout(reject, 1000, guestpage);
        }
    })

}

//callback chaining
// getUser((user) => {
//     console.log(user)
//     login(user, status => {
//         console.log(status)
//         showDashboard(status, adminPage => {
//             console.log(adminPage)
//         }, error => {
//             console.log(error)
//         })
//     }, err => {
//         console.log(err)
//     })
// }, (err) => {
//     console.log(err)
// })

//promise 
// getUser()
//     .then(user => {
//         console.log(user)
//         return login(user)
//     })
//     .then(status => {
//         console.log(status)
//         return showDashboard(status)
//     })
//     .then(page => {
//         console.log(page)
//     })
//     .catch(err => {
//         console.log(err)

//         console.log(err)
//     })

async function main() {
    try {
        const user = await getUser();
        const status = await login(user);
        const page = await showDashboard(status)
    }
    catch (err) {
        console.log(err)
    }
}
main()
.....................................................................................
Modularity:
..........

In java Modularity , is presented via "Packages"

Package organize the code  logically.

Customer.java

package com.ibm.cms

public class Customer{}

Java organizes code folders and files Physically.

d:/javaapps/src/
    com/ibm/cms/Customer.java


What about javascript Modularity?

 Javascript is file based modularity physically
 but logically there is no such modularity at language level.

collection of variable declarations and function.

Once js started growing in large scale, dev struck to organize code.

2000, Smart developers started thinking about how to modualrize js code.
 

Module design patterns came.

1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd
4.ES 6 Module design pattern  = amd + cjs
------------------------------------------------------------
5.System = AMD = CJS + ES 6
6.UMD = NAMESPACE + AMD + CJS = ES 6


only two design patterns are used in development

1.CJS - Common JS =  namespace + amd
2.ES 6 Module design pattern  = amd + cjs

CJS ; implemented inside node js. node supports commonjs by default.

I can organize the code , based on these patterns, but what about runtimes?
  js runtime never suppport these patterns directly then each design pattern is lib.

 Loaders : it is simple js lib to help link and load js files.


lets start cjs first;
......................

cjs is built in node js.
node supports cjs in built. no separate loader or linker is required
but if you run cjs code on browsers , we need loaders.


How to implement cjs in node? How to share code across the files and how to link files

keywords

-require('./folder/fileName') ==import
  to link files
-exports == export
   -used to share code in form of object
   -code is packed inside object and shared that object
-module.exports == export default
   -used to share code as it is.


index.js
const { firstName, salary, skills, calculate } = require('./lib/util')
// const TodoService = require('./services/todoservice')
const { findAll } = require('./services/todoservice')


console.log(firstName, salary, skills, calculate())

// const todoService = new TodoService()
// console.log(TodoService.findAll())
console.log(findAll())

src/services/Todoservice.js

class TodoService {

    findAll() {
        return 'todos'
    }
}
// module.exports = TodoService
module.exports = new TodoService()

.....................................................................................


1.os 

The os module provides operating system-related utility methods and properties. It can be accessed using:

//if you want any module , you need to require them(import them)

const os = require('os')

console.log(os.hostname())
console.log(os.cpus())

.....................................................................................
			Web development - http


How to build non blocking webservers and webapps?

You can create webservers and on which you can deploy apps, unlike traditional webserver model
where webserver is separate, and app is different.

Node invented for building network io applications.

Network implementation in non blocking:

HTTP module is used to build http server,app, deployment

Node uses "single Threaded" web server model, all requests and response are performed by only one thread called "Event loop thread".



HTTP modules objects:

1.Server
  Server object is used to implement http servers/web containers
2.ServerResponse
  Object is used to send data 
3.ClientRequest
   Request object is used to handle http client requests
4.IncommingMessage
   Represents message payloads.


const http = require('http')

//create server
//requestListener is callback function , it is called only when request event and response event is trigger
const requestListener = (req, res) => {
    //process client request and send response
    res.end('Hello')
}
const server = http.createServer(requestListener)


//start the server 
server.listen(3000, () => {
    console.log('Server is ready')
})
...............................................................................

const TODOS = require('../mock-data/todos')

class TodoService {

    findAll() {
        //convert sync todos into async using timer
        //return TODOS
        return new Promise((resolve, reject) => {
            setTimeout(resolve, 5000, TODOS)
        })
    }
}
// module.exports = TodoService
module.exports = new TodoService()
..................................................................................
const http = require('http')
const { findAll } = require('./services/todoservice')

const server = http.createServer(async (req, res) => {
    try {
        const todos = await findAll()
        //send json 
        res.writeHead(200, {
            'Content-Type': 'application/json'
        })
        res.end(JSON.stringify(todos))
    }
    catch (err) {
        res.end(JSON.stringify(err))
    }
})

//start the server 
server.listen(3000, () => {
    console.log('Server is ready')
})
..................................................................................
			 REST API development in node

Req:
1.url pattern which maps resources
  /api/customers
2.method mapping
  /api/customers - GET,POST,DELETE

Frameworks:
..........

We need frameworks/libs.

How to bring frameworks or libs?

.............................................................................................
				Node Package Manager - npm 
..........................................................................................

npm is tool is used to distribute node modules to others
and you can get node modules from others.

npm tool is distributed along with node installation

npm uses public repository server called npmjs.com npmjs.org

tools and libs,frameworks all are distributed as node modules into repository.


package.json file

Every javascript project (client side /server side) must have this file.
This file explains about your project information.

create package.json file

>npm init

{
  "name": "nodeapps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Subramanian Murugan",
  "license": "ISC"
}

package Types:

1.public package
  react
2.private package 
  @angular - @-npm private 

npm is used

to install,uninstall,publish node modules from node repo / into node repo.

if you install third party modules , into your project, node distributes npm tool ,using this you can install,uninstall,upgrade node modules.

installing module:

>npm install  moduleName  --options
>npm i moduleName --options


>npm install module 
  here no option is told, means default is --save

>npm i module

options:
 --save ; 
 --save-dev
 -g


App development ; three stage

1.dev
2.testing
3.production.

if you install any packages/dependencies, you can tell that is it for production and developemnt, only dev/testing

if you are installing any node module, you can tell, do you want to use only for development
or development + production.

Unit testing libs : Junit.jar===>java

 --save = >    development + production
 --save-dev => only for development

Which code need not be used for production:

1.All testing related  libs/frameworks - unit,e2e
2.Tools like compilers,frameworks related code.

Who will separate out this depedency(lib) for production/dev

  Build tools -  webpack.
  npm itself
 --production
 webpack will scan package.json---extracting prod depedencies


 --save => dev + production
 default =>dev + production

 --save-dev  -->only dev 
.....................................................................................

How to install module for dev and production

npm install moduleName --save  /  npm install moduleName 


index.js

const _ = require('lodash')

console.log(_.sum([1,2,3]))

			//////////////////////////////////////////////////////////////////////////////////////////////
				   Automation
/////////////////////////////////////////////////////////////////////////////////////////////

How to use javascript for automation?


We can automate js applications.

write all auotomation steps inside scripts

 "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  }

key: value

key is called command-script command
value is task to be executed. ; task could be any thing.

command can be built in or custom commands

npm provides lot of built in commands

start,test,postinstall,preinstall..........

How to run node applications?

1.node folderName/filename.js

2.npm start
via script
how to run script

>npm commandname ---incase of built in command
>npm start

>npm run commandname - custom commands
>npm run subu

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start" : "node src/app.js",
    "subu"  :"node src/app.js"
  },

npm test
npm start
npm run subu
///////////////////////////////////////////////////////////////////////////////////////////
		
Scripts and Global Module:

-Global modules are used for tooling purpose like compilers,build tools,servers,test runners(mocha).

Globals has some issues:

1.version and compablity issue for new projects


Steps:

1.npm uninstall mocha -g

2.>mocha --help
'mocha' is not recognized as an internal or external command,
operable program or batch file.

3.install mocha locally

 npm install mocha --save-dev

4.>mocha
'mocha' is not recognized as an internal or external command,
operable program or batch file.

Why i am getting error?
  because mocha is command, we cant run directly.

5.solution is run via scripts

package.json
"scripts": {
    "test": "mocha",
    "start": "node src/index.js",
    "subu": "node src/index.js"
  }

npm test

> nodeapps@1.0.0 test C:\session\ibm\2021\june\nodemicroservices\nodeapps
> mocha



  Array
    #indexOf()
      √ should return -1 when the value is not present


  1 passing (6ms)
.....................................................................................
............................................................................................
					Express.js
...........................................................................................
What is express?
Express Fast, unopinionated, minimalist web framework for Node.js

express is built on top of http core module.


What apps can be built using express?


1.RESTFull WebServices

2.Dynamic content generation apps -  spring mvc, .netmvc.   with ui

Core features of Express:

1.Abstraction on core http module
2.lot of apis to send data like json api
3.routers : to create HTTP based web services and apps quickly.
4.middlewares : to extend core framework like - logging,database,security,templates...


Express Key concepts: in express every thing object

Objects in express

1.Application
  We call Container object which other objects
  entry and exit of an application
  application is created by calling function

2.Request

3.Response

4.Router


1.Application object roll:

-Routing HTTP requests
-Configuring middleware
-Rendering HTML views
-Registering a template engine

How to setup express project?

There are two ways

1.manual setup
2.using tool - npm install -g express-generator



1.manual setup:

create folder
create src
create package.json
install depedencies

npm install express --save

const express = require('express')
//create app object 
const app = express()


//request processing :REST API
app.get('/', (req, res) => {
    //send resonse
    res.end('Home')
})
//api 
app.get('/api/todos', (req, res) => {
    //send resonse
    res.status(200).json({
        message: 'todos get'
    })
})
app.post('/api/todos', (req, res) => {
    //send resonse
    res.status(200).json({
        message: 'todos post'
    })
})
app.delete('/api/todos', (req, res) => {
    //send resonse
    res.status(200).json({
        message: 'todos delete'
    })
})
app.put('/api/todos', (req, res) => {
    //send resonse
    res.status(200).json({
        message: 'todos update'
    })
})
//server 
//server server

app.listen(3000, () => {
    console.log('Express is Ready!')
})
.....................................................................................
				Express and Modularity
....................................................................................

modularation of express app:

express provides a concept called "Routers" -  way to isloate code logically and physically

middlewares:
iddlewares:

 - plugins , can  be plugged


types of middlewares

1.built in middlewares
2.third party middlewares
3.custom middlewares.



Use case :
 How to read JSON input. Express server need to read json which was submitted by endusers 
User will submit as json --- express need to convert into javascript object.

Without Middleware :

1.we need to register on, end event for reading input
2.we need to convert input into javascript object - JSON.parse()

With Middleware :

-any middleware is simple javascript module/package only.
-most of the middlewares are community driven.
-if you want any middleware you need to install  

https://expressjs.com/en/resources/middleware.html

body-parser
Node.js body parsing middleware.

Parse incoming request bodies in a middleware before your handlers, available under the req.body property.


Mongodb:

How to connect to a MongoDB database hosted on MongoDB Atlas/commmunity mongo server from inside of a Node.js script (


How MongoDB stores data in documents and collections (instead of rows and tables)


How to create documents using insertOne() and insertMany() 
How to read documents using findOne() and find() 
How to update documents using updateOne() with and without upsert as well as updateMany() 
How to delete documents using deleteOne() and deleteMany() 


How MongoDB Stores Data

MongoDB stores data in BSON documents. BSON is a binary representation of JSON (JavaScript Object Notation) documents. When you read MongoDB documentation, you'll frequently see the term "document," but you can think of a document as simply a JavaScript object. For those coming from the SQL world, you can think of a document as being roughly equivalent to a row.

MongoDB stores groups of documents in collections. For those with a SQL background, you can think of a collection as being roughly equivalent to a table.

document - row
collection - table

Every document is required to have a field named _id. 

The value of _id must be unique for each document in a collection, is immutable, and can be of any type other than an array. 

MongoDB will automatically create an index on _id. You can choose to make the value of _id meaningful (rather than a somewhat random ObjectId) if you have a unique value for each document that you'd like to be able to quickly search

document

{
   "_id": "10057447",
   "listing_url": "https://www.airbnb.com/rooms/10057447",
   "name": "Modern Spacious 1 Bedroom Loft",
   "summary": "Prime location, amazing lighting and no annoying neighbours.  Good place to rent if you want a relaxing time in Montreal.",
   "property_type": "Apartment",
   "bedrooms": {"$numberInt":"1"},
   "bathrooms": {"$numberDecimal":"1.0"},
   "amenities": ["Internet","Wifi","Kitchen","Heating","Family/kid friendly","Washer","Dryer","Smoke detector","First aid kit","Safety card","Fire extinguisher","Essentials","Shampoo","24-hour check-in","Hangers","Iron","Laptop friendly workspace"],
}




















